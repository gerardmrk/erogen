// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/i18n/i18n.proto

package i18n

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CountryInfoRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryInfoRequest) Reset()         { *m = CountryInfoRequest{} }
func (m *CountryInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CountryInfoRequest) ProtoMessage()    {}
func (*CountryInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_i18n_8b7945d7839420fe, []int{0}
}
func (m *CountryInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryInfoRequest.Unmarshal(m, b)
}
func (m *CountryInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryInfoRequest.Marshal(b, m, deterministic)
}
func (dst *CountryInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryInfoRequest.Merge(dst, src)
}
func (m *CountryInfoRequest) XXX_Size() int {
	return xxx_messageInfo_CountryInfoRequest.Size(m)
}
func (m *CountryInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountryInfoRequest proto.InternalMessageInfo

func (m *CountryInfoRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CountryInfoResponse struct {
	Country              *CountryInfo `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CountryInfoResponse) Reset()         { *m = CountryInfoResponse{} }
func (m *CountryInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CountryInfoResponse) ProtoMessage()    {}
func (*CountryInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_i18n_8b7945d7839420fe, []int{1}
}
func (m *CountryInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryInfoResponse.Unmarshal(m, b)
}
func (m *CountryInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryInfoResponse.Marshal(b, m, deterministic)
}
func (dst *CountryInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryInfoResponse.Merge(dst, src)
}
func (m *CountryInfoResponse) XXX_Size() int {
	return xxx_messageInfo_CountryInfoResponse.Size(m)
}
func (m *CountryInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountryInfoResponse proto.InternalMessageInfo

func (m *CountryInfoResponse) GetCountry() *CountryInfo {
	if m != nil {
		return m.Country
	}
	return nil
}

type CountriesInfoRequest struct {
	Filter               string   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset               uint32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountriesInfoRequest) Reset()         { *m = CountriesInfoRequest{} }
func (m *CountriesInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CountriesInfoRequest) ProtoMessage()    {}
func (*CountriesInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_i18n_8b7945d7839420fe, []int{2}
}
func (m *CountriesInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountriesInfoRequest.Unmarshal(m, b)
}
func (m *CountriesInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountriesInfoRequest.Marshal(b, m, deterministic)
}
func (dst *CountriesInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountriesInfoRequest.Merge(dst, src)
}
func (m *CountriesInfoRequest) XXX_Size() int {
	return xxx_messageInfo_CountriesInfoRequest.Size(m)
}
func (m *CountriesInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountriesInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountriesInfoRequest proto.InternalMessageInfo

func (m *CountriesInfoRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CountriesInfoRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CountriesInfoRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type CountryInfo struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iso_2                string   `protobuf:"bytes,2,opt,name=iso_2,json=iso2,proto3" json:"iso_2,omitempty"`
	Iso_3                string   `protobuf:"bytes,3,opt,name=iso_3,json=iso3,proto3" json:"iso_3,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryInfo) Reset()         { *m = CountryInfo{} }
func (m *CountryInfo) String() string { return proto.CompactTextString(m) }
func (*CountryInfo) ProtoMessage()    {}
func (*CountryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_i18n_8b7945d7839420fe, []int{3}
}
func (m *CountryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryInfo.Unmarshal(m, b)
}
func (m *CountryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryInfo.Marshal(b, m, deterministic)
}
func (dst *CountryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryInfo.Merge(dst, src)
}
func (m *CountryInfo) XXX_Size() int {
	return xxx_messageInfo_CountryInfo.Size(m)
}
func (m *CountryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CountryInfo proto.InternalMessageInfo

func (m *CountryInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CountryInfo) GetIso_2() string {
	if m != nil {
		return m.Iso_2
	}
	return ""
}

func (m *CountryInfo) GetIso_3() string {
	if m != nil {
		return m.Iso_3
	}
	return ""
}

func (m *CountryInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CountryInfoRequest)(nil), "erogen.CountryInfoRequest")
	proto.RegisterType((*CountryInfoResponse)(nil), "erogen.CountryInfoResponse")
	proto.RegisterType((*CountriesInfoRequest)(nil), "erogen.CountriesInfoRequest")
	proto.RegisterType((*CountryInfo)(nil), "erogen.CountryInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// I18NServiceClient is the client API for I18NService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type I18NServiceClient interface {
	CountryInfo(ctx context.Context, in *CountryInfoRequest, opts ...grpc.CallOption) (*CountryInfoResponse, error)
	CountriesInfo(ctx context.Context, in *CountriesInfoRequest, opts ...grpc.CallOption) (I18NService_CountriesInfoClient, error)
}

type i18NServiceClient struct {
	cc *grpc.ClientConn
}

func NewI18NServiceClient(cc *grpc.ClientConn) I18NServiceClient {
	return &i18NServiceClient{cc}
}

func (c *i18NServiceClient) CountryInfo(ctx context.Context, in *CountryInfoRequest, opts ...grpc.CallOption) (*CountryInfoResponse, error) {
	out := new(CountryInfoResponse)
	err := c.cc.Invoke(ctx, "/erogen.I18nService/CountryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *i18NServiceClient) CountriesInfo(ctx context.Context, in *CountriesInfoRequest, opts ...grpc.CallOption) (I18NService_CountriesInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_I18NService_serviceDesc.Streams[0], "/erogen.I18nService/CountriesInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &i18NServiceCountriesInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type I18NService_CountriesInfoClient interface {
	Recv() (*CountryInfoResponse, error)
	grpc.ClientStream
}

type i18NServiceCountriesInfoClient struct {
	grpc.ClientStream
}

func (x *i18NServiceCountriesInfoClient) Recv() (*CountryInfoResponse, error) {
	m := new(CountryInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// I18NServiceServer is the server API for I18NService service.
type I18NServiceServer interface {
	CountryInfo(context.Context, *CountryInfoRequest) (*CountryInfoResponse, error)
	CountriesInfo(*CountriesInfoRequest, I18NService_CountriesInfoServer) error
}

func RegisterI18NServiceServer(s *grpc.Server, srv I18NServiceServer) {
	s.RegisterService(&_I18NService_serviceDesc, srv)
}

func _I18NService_CountryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(I18NServiceServer).CountryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erogen.I18nService/CountryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(I18NServiceServer).CountryInfo(ctx, req.(*CountryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _I18NService_CountriesInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountriesInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(I18NServiceServer).CountriesInfo(m, &i18NServiceCountriesInfoServer{stream})
}

type I18NService_CountriesInfoServer interface {
	Send(*CountryInfoResponse) error
	grpc.ServerStream
}

type i18NServiceCountriesInfoServer struct {
	grpc.ServerStream
}

func (x *i18NServiceCountriesInfoServer) Send(m *CountryInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _I18NService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erogen.I18nService",
	HandlerType: (*I18NServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountryInfo",
			Handler:    _I18NService_CountryInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CountriesInfo",
			Handler:       _I18NService_CountriesInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/i18n/i18n.proto",
}

func init() { proto.RegisterFile("proto/i18n/i18n.proto", fileDescriptor_i18n_8b7945d7839420fe) }

var fileDescriptor_i18n_8b7945d7839420fe = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x49, 0x49, 0x83, 0x7a, 0x51, 0x19, 0x2e, 0x05, 0x45, 0x85, 0x01, 0x59, 0x0c, 0x2c,
	0x04, 0x9a, 0x2c, 0x9d, 0x81, 0x81, 0x2e, 0x0c, 0x61, 0x03, 0x24, 0x04, 0xed, 0x05, 0x59, 0x02,
	0xbb, 0xd8, 0x2e, 0x12, 0xbf, 0x88, 0xbf, 0x89, 0x72, 0x6e, 0xa5, 0x18, 0x55, 0x62, 0x89, 0xf2,
	0x9e, 0x3f, 0xbf, 0xf3, 0xdd, 0xc1, 0xc1, 0xd2, 0x68, 0xa7, 0x2f, 0xe4, 0x64, 0xaa, 0xf8, 0x53,
	0xb0, 0xc6, 0x84, 0x8c, 0x7e, 0x23, 0x25, 0x4e, 0x01, 0xaf, 0xf5, 0x4a, 0x39, 0xf3, 0x3d, 0x53,
	0x8d, 0xae, 0xe9, 0x73, 0x45, 0xd6, 0xe1, 0x3e, 0xf4, 0xe4, 0x22, 0x8f, 0x4e, 0xa2, 0xb3, 0x61,
	0xdd, 0x93, 0x0b, 0x71, 0x03, 0x59, 0x40, 0xd9, 0xa5, 0x56, 0x96, 0xf0, 0x1c, 0xf6, 0xe6, 0xde,
	0x66, 0x36, 0x2d, 0xb3, 0xc2, 0xc7, 0x16, 0x5d, 0x7a, 0xc3, 0x88, 0x27, 0x18, 0x79, 0x5f, 0x92,
	0xed, 0x56, 0x3b, 0x84, 0xa4, 0x91, 0xef, 0x8e, 0x0c, 0xa7, 0x0c, 0xea, 0xb5, 0xc2, 0x11, 0xf4,
	0xf9, 0x6a, 0xde, 0xe3, 0x87, 0x78, 0xd1, 0xd2, 0xba, 0x69, 0x2c, 0xb9, 0x7c, 0x97, 0xed, 0xb5,
	0x12, 0x8f, 0x90, 0x76, 0xaa, 0xfe, 0x6d, 0x01, 0x33, 0xe8, 0x4b, 0xab, 0x9f, 0x4b, 0x0e, 0x1b,
	0xd4, 0xb1, 0xb4, 0xba, 0xdc, 0x98, 0x15, 0x47, 0x79, 0xb3, 0x42, 0x84, 0x58, 0xbd, 0x7c, 0x50,
	0x1e, 0x7b, 0xaf, 0xfd, 0x2f, 0x7f, 0x22, 0x48, 0x67, 0x93, 0xa9, 0xba, 0x27, 0xf3, 0x25, 0xe7,
	0x84, 0xb7, 0x61, 0xb1, 0xf1, 0xb6, 0xbe, 0x7d, 0x77, 0xe3, 0xa3, 0xad, 0x67, 0x7e, 0x82, 0x62,
	0x07, 0xef, 0x60, 0x18, 0x0c, 0x05, 0x8f, 0x43, 0x3e, 0x9c, 0xd5, 0x3f, 0x69, 0x97, 0xd1, 0x55,
	0xf2, 0x10, 0xb7, 0x6b, 0x7e, 0x4d, 0x78, 0xcf, 0xd5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0e,
	0x00, 0x22, 0x07, 0x00, 0x02, 0x00, 0x00,
}
