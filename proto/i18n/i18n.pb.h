// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/i18n/i18n.proto

#ifndef PROTOBUF_INCLUDED_proto_2fi18n_2fi18n_2eproto
#define PROTOBUF_INCLUDED_proto_2fi18n_2fi18n_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fi18n_2fi18n_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fi18n_2fi18n_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_proto_2fi18n_2fi18n_2eproto();
namespace erogen {
class CountriesInfoRequest;
class CountriesInfoRequestDefaultTypeInternal;
extern CountriesInfoRequestDefaultTypeInternal _CountriesInfoRequest_default_instance_;
class CountryInfo;
class CountryInfoDefaultTypeInternal;
extern CountryInfoDefaultTypeInternal _CountryInfo_default_instance_;
class CountryInfoRequest;
class CountryInfoRequestDefaultTypeInternal;
extern CountryInfoRequestDefaultTypeInternal _CountryInfoRequest_default_instance_;
class CountryInfoResponse;
class CountryInfoResponseDefaultTypeInternal;
extern CountryInfoResponseDefaultTypeInternal _CountryInfoResponse_default_instance_;
}  // namespace erogen
namespace google {
namespace protobuf {
template<> ::erogen::CountriesInfoRequest* Arena::CreateMaybeMessage<::erogen::CountriesInfoRequest>(Arena*);
template<> ::erogen::CountryInfo* Arena::CreateMaybeMessage<::erogen::CountryInfo>(Arena*);
template<> ::erogen::CountryInfoRequest* Arena::CreateMaybeMessage<::erogen::CountryInfoRequest>(Arena*);
template<> ::erogen::CountryInfoResponse* Arena::CreateMaybeMessage<::erogen::CountryInfoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace erogen {

// ===================================================================

class CountryInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erogen.CountryInfoRequest) */ {
 public:
  CountryInfoRequest();
  virtual ~CountryInfoRequest();

  CountryInfoRequest(const CountryInfoRequest& from);

  inline CountryInfoRequest& operator=(const CountryInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountryInfoRequest(CountryInfoRequest&& from) noexcept
    : CountryInfoRequest() {
    *this = ::std::move(from);
  }

  inline CountryInfoRequest& operator=(CountryInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CountryInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountryInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CountryInfoRequest*>(
               &_CountryInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CountryInfoRequest* other);
  friend void swap(CountryInfoRequest& a, CountryInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountryInfoRequest* New() const final {
    return CreateMaybeMessage<CountryInfoRequest>(nullptr);
  }

  CountryInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountryInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountryInfoRequest& from);
  void MergeFrom(const CountryInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountryInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:erogen.CountryInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fi18n_2fi18n_2eproto;
};
// -------------------------------------------------------------------

class CountryInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erogen.CountryInfoResponse) */ {
 public:
  CountryInfoResponse();
  virtual ~CountryInfoResponse();

  CountryInfoResponse(const CountryInfoResponse& from);

  inline CountryInfoResponse& operator=(const CountryInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountryInfoResponse(CountryInfoResponse&& from) noexcept
    : CountryInfoResponse() {
    *this = ::std::move(from);
  }

  inline CountryInfoResponse& operator=(CountryInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CountryInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountryInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CountryInfoResponse*>(
               &_CountryInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CountryInfoResponse* other);
  friend void swap(CountryInfoResponse& a, CountryInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountryInfoResponse* New() const final {
    return CreateMaybeMessage<CountryInfoResponse>(nullptr);
  }

  CountryInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountryInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountryInfoResponse& from);
  void MergeFrom(const CountryInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountryInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .erogen.CountryInfo country = 1;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 1;
  const ::erogen::CountryInfo& country() const;
  ::erogen::CountryInfo* release_country();
  ::erogen::CountryInfo* mutable_country();
  void set_allocated_country(::erogen::CountryInfo* country);

  // @@protoc_insertion_point(class_scope:erogen.CountryInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::erogen::CountryInfo* country_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fi18n_2fi18n_2eproto;
};
// -------------------------------------------------------------------

class CountriesInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erogen.CountriesInfoRequest) */ {
 public:
  CountriesInfoRequest();
  virtual ~CountriesInfoRequest();

  CountriesInfoRequest(const CountriesInfoRequest& from);

  inline CountriesInfoRequest& operator=(const CountriesInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountriesInfoRequest(CountriesInfoRequest&& from) noexcept
    : CountriesInfoRequest() {
    *this = ::std::move(from);
  }

  inline CountriesInfoRequest& operator=(CountriesInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CountriesInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountriesInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CountriesInfoRequest*>(
               &_CountriesInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CountriesInfoRequest* other);
  friend void swap(CountriesInfoRequest& a, CountriesInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountriesInfoRequest* New() const final {
    return CreateMaybeMessage<CountriesInfoRequest>(nullptr);
  }

  CountriesInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountriesInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountriesInfoRequest& from);
  void MergeFrom(const CountriesInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountriesInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filter = 1;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // uint32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // uint32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:erogen.CountriesInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fi18n_2fi18n_2eproto;
};
// -------------------------------------------------------------------

class CountryInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erogen.CountryInfo) */ {
 public:
  CountryInfo();
  virtual ~CountryInfo();

  CountryInfo(const CountryInfo& from);

  inline CountryInfo& operator=(const CountryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountryInfo(CountryInfo&& from) noexcept
    : CountryInfo() {
    *this = ::std::move(from);
  }

  inline CountryInfo& operator=(CountryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CountryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountryInfo* internal_default_instance() {
    return reinterpret_cast<const CountryInfo*>(
               &_CountryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CountryInfo* other);
  friend void swap(CountryInfo& a, CountryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountryInfo* New() const final {
    return CreateMaybeMessage<CountryInfo>(nullptr);
  }

  CountryInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountryInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountryInfo& from);
  void MergeFrom(const CountryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string iso_2 = 2;
  void clear_iso_2();
  static const int kIso2FieldNumber = 2;
  const ::std::string& iso_2() const;
  void set_iso_2(const ::std::string& value);
  #if LANG_CXX11
  void set_iso_2(::std::string&& value);
  #endif
  void set_iso_2(const char* value);
  void set_iso_2(const char* value, size_t size);
  ::std::string* mutable_iso_2();
  ::std::string* release_iso_2();
  void set_allocated_iso_2(::std::string* iso_2);

  // string iso_3 = 3;
  void clear_iso_3();
  static const int kIso3FieldNumber = 3;
  const ::std::string& iso_3() const;
  void set_iso_3(const ::std::string& value);
  #if LANG_CXX11
  void set_iso_3(::std::string&& value);
  #endif
  void set_iso_3(const char* value);
  void set_iso_3(const char* value, size_t size);
  ::std::string* mutable_iso_3();
  ::std::string* release_iso_3();
  void set_allocated_iso_3(::std::string* iso_3);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:erogen.CountryInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr iso_2_;
  ::google::protobuf::internal::ArenaStringPtr iso_3_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fi18n_2fi18n_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CountryInfoRequest

// uint32 id = 1;
inline void CountryInfoRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CountryInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:erogen.CountryInfoRequest.id)
  return id_;
}
inline void CountryInfoRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erogen.CountryInfoRequest.id)
}

// -------------------------------------------------------------------

// CountryInfoResponse

// .erogen.CountryInfo country = 1;
inline bool CountryInfoResponse::has_country() const {
  return this != internal_default_instance() && country_ != nullptr;
}
inline void CountryInfoResponse::clear_country() {
  if (GetArenaNoVirtual() == nullptr && country_ != nullptr) {
    delete country_;
  }
  country_ = nullptr;
}
inline const ::erogen::CountryInfo& CountryInfoResponse::country() const {
  const ::erogen::CountryInfo* p = country_;
  // @@protoc_insertion_point(field_get:erogen.CountryInfoResponse.country)
  return p != nullptr ? *p : *reinterpret_cast<const ::erogen::CountryInfo*>(
      &::erogen::_CountryInfo_default_instance_);
}
inline ::erogen::CountryInfo* CountryInfoResponse::release_country() {
  // @@protoc_insertion_point(field_release:erogen.CountryInfoResponse.country)
  
  ::erogen::CountryInfo* temp = country_;
  country_ = nullptr;
  return temp;
}
inline ::erogen::CountryInfo* CountryInfoResponse::mutable_country() {
  
  if (country_ == nullptr) {
    auto* p = CreateMaybeMessage<::erogen::CountryInfo>(GetArenaNoVirtual());
    country_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erogen.CountryInfoResponse.country)
  return country_;
}
inline void CountryInfoResponse::set_allocated_country(::erogen::CountryInfo* country) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete country_;
  }
  if (country) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      country = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, country, submessage_arena);
    }
    
  } else {
    
  }
  country_ = country;
  // @@protoc_insertion_point(field_set_allocated:erogen.CountryInfoResponse.country)
}

// -------------------------------------------------------------------

// CountriesInfoRequest

// string filter = 1;
inline void CountriesInfoRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CountriesInfoRequest::filter() const {
  // @@protoc_insertion_point(field_get:erogen.CountriesInfoRequest.filter)
  return filter_.GetNoArena();
}
inline void CountriesInfoRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erogen.CountriesInfoRequest.filter)
}
#if LANG_CXX11
inline void CountriesInfoRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erogen.CountriesInfoRequest.filter)
}
#endif
inline void CountriesInfoRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erogen.CountriesInfoRequest.filter)
}
inline void CountriesInfoRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erogen.CountriesInfoRequest.filter)
}
inline ::std::string* CountriesInfoRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:erogen.CountriesInfoRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CountriesInfoRequest::release_filter() {
  // @@protoc_insertion_point(field_release:erogen.CountriesInfoRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CountriesInfoRequest::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:erogen.CountriesInfoRequest.filter)
}

// uint32 count = 2;
inline void CountriesInfoRequest::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 CountriesInfoRequest::count() const {
  // @@protoc_insertion_point(field_get:erogen.CountriesInfoRequest.count)
  return count_;
}
inline void CountriesInfoRequest::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:erogen.CountriesInfoRequest.count)
}

// uint32 offset = 3;
inline void CountriesInfoRequest::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 CountriesInfoRequest::offset() const {
  // @@protoc_insertion_point(field_get:erogen.CountriesInfoRequest.offset)
  return offset_;
}
inline void CountriesInfoRequest::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:erogen.CountriesInfoRequest.offset)
}

// -------------------------------------------------------------------

// CountryInfo

// uint32 id = 1;
inline void CountryInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CountryInfo::id() const {
  // @@protoc_insertion_point(field_get:erogen.CountryInfo.id)
  return id_;
}
inline void CountryInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erogen.CountryInfo.id)
}

// string iso_2 = 2;
inline void CountryInfo::clear_iso_2() {
  iso_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CountryInfo::iso_2() const {
  // @@protoc_insertion_point(field_get:erogen.CountryInfo.iso_2)
  return iso_2_.GetNoArena();
}
inline void CountryInfo::set_iso_2(const ::std::string& value) {
  
  iso_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erogen.CountryInfo.iso_2)
}
#if LANG_CXX11
inline void CountryInfo::set_iso_2(::std::string&& value) {
  
  iso_2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erogen.CountryInfo.iso_2)
}
#endif
inline void CountryInfo::set_iso_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erogen.CountryInfo.iso_2)
}
inline void CountryInfo::set_iso_2(const char* value, size_t size) {
  
  iso_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erogen.CountryInfo.iso_2)
}
inline ::std::string* CountryInfo::mutable_iso_2() {
  
  // @@protoc_insertion_point(field_mutable:erogen.CountryInfo.iso_2)
  return iso_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CountryInfo::release_iso_2() {
  // @@protoc_insertion_point(field_release:erogen.CountryInfo.iso_2)
  
  return iso_2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CountryInfo::set_allocated_iso_2(::std::string* iso_2) {
  if (iso_2 != nullptr) {
    
  } else {
    
  }
  iso_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_2);
  // @@protoc_insertion_point(field_set_allocated:erogen.CountryInfo.iso_2)
}

// string iso_3 = 3;
inline void CountryInfo::clear_iso_3() {
  iso_3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CountryInfo::iso_3() const {
  // @@protoc_insertion_point(field_get:erogen.CountryInfo.iso_3)
  return iso_3_.GetNoArena();
}
inline void CountryInfo::set_iso_3(const ::std::string& value) {
  
  iso_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erogen.CountryInfo.iso_3)
}
#if LANG_CXX11
inline void CountryInfo::set_iso_3(::std::string&& value) {
  
  iso_3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erogen.CountryInfo.iso_3)
}
#endif
inline void CountryInfo::set_iso_3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erogen.CountryInfo.iso_3)
}
inline void CountryInfo::set_iso_3(const char* value, size_t size) {
  
  iso_3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erogen.CountryInfo.iso_3)
}
inline ::std::string* CountryInfo::mutable_iso_3() {
  
  // @@protoc_insertion_point(field_mutable:erogen.CountryInfo.iso_3)
  return iso_3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CountryInfo::release_iso_3() {
  // @@protoc_insertion_point(field_release:erogen.CountryInfo.iso_3)
  
  return iso_3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CountryInfo::set_allocated_iso_3(::std::string* iso_3) {
  if (iso_3 != nullptr) {
    
  } else {
    
  }
  iso_3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_3);
  // @@protoc_insertion_point(field_set_allocated:erogen.CountryInfo.iso_3)
}

// string name = 4;
inline void CountryInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CountryInfo::name() const {
  // @@protoc_insertion_point(field_get:erogen.CountryInfo.name)
  return name_.GetNoArena();
}
inline void CountryInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erogen.CountryInfo.name)
}
#if LANG_CXX11
inline void CountryInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erogen.CountryInfo.name)
}
#endif
inline void CountryInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erogen.CountryInfo.name)
}
inline void CountryInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erogen.CountryInfo.name)
}
inline ::std::string* CountryInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:erogen.CountryInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CountryInfo::release_name() {
  // @@protoc_insertion_point(field_release:erogen.CountryInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CountryInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:erogen.CountryInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace erogen

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proto_2fi18n_2fi18n_2eproto
