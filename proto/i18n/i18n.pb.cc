// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/i18n/i18n.proto

#include "proto/i18n/i18n.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2fi18n_2fi18n_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CountryInfo_proto_2fi18n_2fi18n_2eproto;
namespace erogen {
class CountryInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountryInfoRequest> _instance;
} _CountryInfoRequest_default_instance_;
class CountryInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountryInfoResponse> _instance;
} _CountryInfoResponse_default_instance_;
class CountriesInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountriesInfoRequest> _instance;
} _CountriesInfoRequest_default_instance_;
class CountryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountryInfo> _instance;
} _CountryInfo_default_instance_;
}  // namespace erogen
static void InitDefaultsCountryInfoRequest_proto_2fi18n_2fi18n_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::erogen::_CountryInfoRequest_default_instance_;
    new (ptr) ::erogen::CountryInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::erogen::CountryInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CountryInfoRequest_proto_2fi18n_2fi18n_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCountryInfoRequest_proto_2fi18n_2fi18n_2eproto}, {}};

static void InitDefaultsCountryInfoResponse_proto_2fi18n_2fi18n_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::erogen::_CountryInfoResponse_default_instance_;
    new (ptr) ::erogen::CountryInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::erogen::CountryInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CountryInfoResponse_proto_2fi18n_2fi18n_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCountryInfoResponse_proto_2fi18n_2fi18n_2eproto}, {
      &scc_info_CountryInfo_proto_2fi18n_2fi18n_2eproto.base,}};

static void InitDefaultsCountriesInfoRequest_proto_2fi18n_2fi18n_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::erogen::_CountriesInfoRequest_default_instance_;
    new (ptr) ::erogen::CountriesInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::erogen::CountriesInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CountriesInfoRequest_proto_2fi18n_2fi18n_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCountriesInfoRequest_proto_2fi18n_2fi18n_2eproto}, {}};

static void InitDefaultsCountryInfo_proto_2fi18n_2fi18n_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::erogen::_CountryInfo_default_instance_;
    new (ptr) ::erogen::CountryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::erogen::CountryInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CountryInfo_proto_2fi18n_2fi18n_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCountryInfo_proto_2fi18n_2fi18n_2eproto}, {}};

void InitDefaults_proto_2fi18n_2fi18n_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CountryInfoRequest_proto_2fi18n_2fi18n_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountryInfoResponse_proto_2fi18n_2fi18n_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountriesInfoRequest_proto_2fi18n_2fi18n_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountryInfo_proto_2fi18n_2fi18n_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2fi18n_2fi18n_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_proto_2fi18n_2fi18n_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2fi18n_2fi18n_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2fi18n_2fi18n_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfoRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfoResponse, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::erogen::CountriesInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::erogen::CountriesInfoRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::erogen::CountriesInfoRequest, count_),
  PROTOBUF_FIELD_OFFSET(::erogen::CountriesInfoRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfo, id_),
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfo, iso_2_),
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfo, iso_3_),
  PROTOBUF_FIELD_OFFSET(::erogen::CountryInfo, name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::erogen::CountryInfoRequest)},
  { 6, -1, sizeof(::erogen::CountryInfoResponse)},
  { 12, -1, sizeof(::erogen::CountriesInfoRequest)},
  { 20, -1, sizeof(::erogen::CountryInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::erogen::_CountryInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::erogen::_CountryInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::erogen::_CountriesInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::erogen::_CountryInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fi18n_2fi18n_2eproto = {
  {}, AddDescriptors_proto_2fi18n_2fi18n_2eproto, "proto/i18n/i18n.proto", schemas,
  file_default_instances, TableStruct_proto_2fi18n_2fi18n_2eproto::offsets,
  file_level_metadata_proto_2fi18n_2fi18n_2eproto, 4, file_level_enum_descriptors_proto_2fi18n_2fi18n_2eproto, file_level_service_descriptors_proto_2fi18n_2fi18n_2eproto,
};

const char descriptor_table_protodef_proto_2fi18n_2fi18n_2eproto[] =
  "\n\025proto/i18n/i18n.proto\022\006erogen\" \n\022Count"
  "ryInfoRequest\022\n\n\002id\030\001 \001(\r\";\n\023CountryInfo"
  "Response\022$\n\007country\030\001 \001(\0132\023.erogen.Count"
  "ryInfo\"E\n\024CountriesInfoRequest\022\016\n\006filter"
  "\030\001 \001(\t\022\r\n\005count\030\002 \001(\r\022\016\n\006offset\030\003 \001(\r\"E\n"
  "\013CountryInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005iso_2\030\002 \001(\t\022"
  "\r\n\005iso_3\030\003 \001(\t\022\014\n\004name\030\004 \001(\t2\247\001\n\013I18nSer"
  "vice\022H\n\013CountryInfo\022\032.erogen.CountryInfo"
  "Request\032\033.erogen.CountryInfoResponse\"\000\022N"
  "\n\rCountriesInfo\022\034.erogen.CountriesInfoRe"
  "quest\032\033.erogen.CountryInfoResponse\"\0000\001B\006"
  "Z\004i18nb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fi18n_2fi18n_2eproto = {
  false, InitDefaults_proto_2fi18n_2fi18n_2eproto, 
  descriptor_table_protodef_proto_2fi18n_2fi18n_2eproto,
  "proto/i18n/i18n.proto", &assign_descriptors_table_proto_2fi18n_2fi18n_2eproto, 454,
};

void AddDescriptors_proto_2fi18n_2fi18n_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2fi18n_2fi18n_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fi18n_2fi18n_2eproto = []() { AddDescriptors_proto_2fi18n_2fi18n_2eproto(); return true; }();
namespace erogen {

// ===================================================================

void CountryInfoRequest::InitAsDefaultInstance() {
}
class CountryInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountryInfoRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountryInfoRequest::CountryInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:erogen.CountryInfoRequest)
}
CountryInfoRequest::CountryInfoRequest(const CountryInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:erogen.CountryInfoRequest)
}

void CountryInfoRequest::SharedCtor() {
  id_ = 0u;
}

CountryInfoRequest::~CountryInfoRequest() {
  // @@protoc_insertion_point(destructor:erogen.CountryInfoRequest)
  SharedDtor();
}

void CountryInfoRequest::SharedDtor() {
}

void CountryInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountryInfoRequest& CountryInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountryInfoRequest_proto_2fi18n_2fi18n_2eproto.base);
  return *internal_default_instance();
}


void CountryInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:erogen.CountryInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountryInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountryInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountryInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:erogen.CountryInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:erogen.CountryInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:erogen.CountryInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountryInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:erogen.CountryInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:erogen.CountryInfoRequest)
}

::google::protobuf::uint8* CountryInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:erogen.CountryInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:erogen.CountryInfoRequest)
  return target;
}

size_t CountryInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:erogen.CountryInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountryInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:erogen.CountryInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CountryInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CountryInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:erogen.CountryInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:erogen.CountryInfoRequest)
    MergeFrom(*source);
  }
}

void CountryInfoRequest::MergeFrom(const CountryInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:erogen.CountryInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CountryInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:erogen.CountryInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryInfoRequest::CopyFrom(const CountryInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:erogen.CountryInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryInfoRequest::IsInitialized() const {
  return true;
}

void CountryInfoRequest::Swap(CountryInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountryInfoRequest::InternalSwap(CountryInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata CountryInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fi18n_2fi18n_2eproto);
  return ::file_level_metadata_proto_2fi18n_2fi18n_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CountryInfoResponse::InitAsDefaultInstance() {
  ::erogen::_CountryInfoResponse_default_instance_._instance.get_mutable()->country_ = const_cast< ::erogen::CountryInfo*>(
      ::erogen::CountryInfo::internal_default_instance());
}
class CountryInfoResponse::HasBitSetters {
 public:
  static const ::erogen::CountryInfo& country(const CountryInfoResponse* msg);
};

const ::erogen::CountryInfo&
CountryInfoResponse::HasBitSetters::country(const CountryInfoResponse* msg) {
  return *msg->country_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountryInfoResponse::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountryInfoResponse::CountryInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:erogen.CountryInfoResponse)
}
CountryInfoResponse::CountryInfoResponse(const CountryInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_country()) {
    country_ = new ::erogen::CountryInfo(*from.country_);
  } else {
    country_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:erogen.CountryInfoResponse)
}

void CountryInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CountryInfoResponse_proto_2fi18n_2fi18n_2eproto.base);
  country_ = nullptr;
}

CountryInfoResponse::~CountryInfoResponse() {
  // @@protoc_insertion_point(destructor:erogen.CountryInfoResponse)
  SharedDtor();
}

void CountryInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete country_;
}

void CountryInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountryInfoResponse& CountryInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountryInfoResponse_proto_2fi18n_2fi18n_2eproto.base);
  return *internal_default_instance();
}


void CountryInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:erogen.CountryInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && country_ != nullptr) {
    delete country_;
  }
  country_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountryInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountryInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .erogen.CountryInfo country = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::erogen::CountryInfo::_InternalParse;
        object = msg->mutable_country();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountryInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:erogen.CountryInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .erogen.CountryInfo country = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:erogen.CountryInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:erogen.CountryInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountryInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:erogen.CountryInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .erogen.CountryInfo country = 1;
  if (this->has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::country(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:erogen.CountryInfoResponse)
}

::google::protobuf::uint8* CountryInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:erogen.CountryInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .erogen.CountryInfo country = 1;
  if (this->has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::country(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:erogen.CountryInfoResponse)
  return target;
}

size_t CountryInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:erogen.CountryInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .erogen.CountryInfo country = 1;
  if (this->has_country()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *country_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountryInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:erogen.CountryInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CountryInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CountryInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:erogen.CountryInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:erogen.CountryInfoResponse)
    MergeFrom(*source);
  }
}

void CountryInfoResponse::MergeFrom(const CountryInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:erogen.CountryInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_country()) {
    mutable_country()->::erogen::CountryInfo::MergeFrom(from.country());
  }
}

void CountryInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:erogen.CountryInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryInfoResponse::CopyFrom(const CountryInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:erogen.CountryInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryInfoResponse::IsInitialized() const {
  return true;
}

void CountryInfoResponse::Swap(CountryInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountryInfoResponse::InternalSwap(CountryInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(country_, other->country_);
}

::google::protobuf::Metadata CountryInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fi18n_2fi18n_2eproto);
  return ::file_level_metadata_proto_2fi18n_2fi18n_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CountriesInfoRequest::InitAsDefaultInstance() {
}
class CountriesInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountriesInfoRequest::kFilterFieldNumber;
const int CountriesInfoRequest::kCountFieldNumber;
const int CountriesInfoRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountriesInfoRequest::CountriesInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:erogen.CountriesInfoRequest)
}
CountriesInfoRequest::CountriesInfoRequest(const CountriesInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:erogen.CountriesInfoRequest)
}

void CountriesInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CountriesInfoRequest_proto_2fi18n_2fi18n_2eproto.base);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
}

CountriesInfoRequest::~CountriesInfoRequest() {
  // @@protoc_insertion_point(destructor:erogen.CountriesInfoRequest)
  SharedDtor();
}

void CountriesInfoRequest::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CountriesInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountriesInfoRequest& CountriesInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountriesInfoRequest_proto_2fi18n_2fi18n_2eproto.base);
  return *internal_default_instance();
}


void CountriesInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:erogen.CountriesInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountriesInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountriesInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string filter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("erogen.CountriesInfoRequest.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountriesInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:erogen.CountriesInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "erogen.CountriesInfoRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:erogen.CountriesInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:erogen.CountriesInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountriesInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:erogen.CountriesInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountriesInfoRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filter(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:erogen.CountriesInfoRequest)
}

::google::protobuf::uint8* CountriesInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:erogen.CountriesInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountriesInfoRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:erogen.CountriesInfoRequest)
  return target;
}

size_t CountriesInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:erogen.CountriesInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountriesInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:erogen.CountriesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CountriesInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CountriesInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:erogen.CountriesInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:erogen.CountriesInfoRequest)
    MergeFrom(*source);
  }
}

void CountriesInfoRequest::MergeFrom(const CountriesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:erogen.CountriesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void CountriesInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:erogen.CountriesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountriesInfoRequest::CopyFrom(const CountriesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:erogen.CountriesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountriesInfoRequest::IsInitialized() const {
  return true;
}

void CountriesInfoRequest::Swap(CountriesInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountriesInfoRequest::InternalSwap(CountriesInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(offset_, other->offset_);
}

::google::protobuf::Metadata CountriesInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fi18n_2fi18n_2eproto);
  return ::file_level_metadata_proto_2fi18n_2fi18n_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CountryInfo::InitAsDefaultInstance() {
}
class CountryInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountryInfo::kIdFieldNumber;
const int CountryInfo::kIso2FieldNumber;
const int CountryInfo::kIso3FieldNumber;
const int CountryInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountryInfo::CountryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:erogen.CountryInfo)
}
CountryInfo::CountryInfo(const CountryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iso_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iso_2().size() > 0) {
    iso_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_2_);
  }
  iso_3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iso_3().size() > 0) {
    iso_3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_3_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:erogen.CountryInfo)
}

void CountryInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CountryInfo_proto_2fi18n_2fi18n_2eproto.base);
  iso_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CountryInfo::~CountryInfo() {
  // @@protoc_insertion_point(destructor:erogen.CountryInfo)
  SharedDtor();
}

void CountryInfo::SharedDtor() {
  iso_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CountryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountryInfo& CountryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountryInfo_proto_2fi18n_2fi18n_2eproto.base);
  return *internal_default_instance();
}


void CountryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:erogen.CountryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iso_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountryInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountryInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string iso_2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("erogen.CountryInfo.iso_2");
        object = msg->mutable_iso_2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string iso_3 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("erogen.CountryInfo.iso_3");
        object = msg->mutable_iso_3();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("erogen.CountryInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:erogen.CountryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string iso_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso_2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iso_2().data(), static_cast<int>(this->iso_2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "erogen.CountryInfo.iso_2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string iso_3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso_3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iso_3().data(), static_cast<int>(this->iso_3().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "erogen.CountryInfo.iso_3"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "erogen.CountryInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:erogen.CountryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:erogen.CountryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:erogen.CountryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // string iso_2 = 2;
  if (this->iso_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iso_2().data(), static_cast<int>(this->iso_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountryInfo.iso_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iso_2(), output);
  }

  // string iso_3 = 3;
  if (this->iso_3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iso_3().data(), static_cast<int>(this->iso_3().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountryInfo.iso_3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iso_3(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountryInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:erogen.CountryInfo)
}

::google::protobuf::uint8* CountryInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:erogen.CountryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // string iso_2 = 2;
  if (this->iso_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iso_2().data(), static_cast<int>(this->iso_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountryInfo.iso_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iso_2(), target);
  }

  // string iso_3 = 3;
  if (this->iso_3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iso_3().data(), static_cast<int>(this->iso_3().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountryInfo.iso_3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iso_3(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "erogen.CountryInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:erogen.CountryInfo)
  return target;
}

size_t CountryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:erogen.CountryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iso_2 = 2;
  if (this->iso_2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iso_2());
  }

  // string iso_3 = 3;
  if (this->iso_3().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iso_3());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:erogen.CountryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CountryInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CountryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:erogen.CountryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:erogen.CountryInfo)
    MergeFrom(*source);
  }
}

void CountryInfo::MergeFrom(const CountryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:erogen.CountryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iso_2().size() > 0) {

    iso_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_2_);
  }
  if (from.iso_3().size() > 0) {

    iso_3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_3_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CountryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:erogen.CountryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryInfo::CopyFrom(const CountryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:erogen.CountryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryInfo::IsInitialized() const {
  return true;
}

void CountryInfo::Swap(CountryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountryInfo::InternalSwap(CountryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  iso_2_.Swap(&other->iso_2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iso_3_.Swap(&other->iso_3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata CountryInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fi18n_2fi18n_2eproto);
  return ::file_level_metadata_proto_2fi18n_2fi18n_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace erogen
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::erogen::CountryInfoRequest* Arena::CreateMaybeMessage< ::erogen::CountryInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::erogen::CountryInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::erogen::CountryInfoResponse* Arena::CreateMaybeMessage< ::erogen::CountryInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::erogen::CountryInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::erogen::CountriesInfoRequest* Arena::CreateMaybeMessage< ::erogen::CountriesInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::erogen::CountriesInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::erogen::CountryInfo* Arena::CreateMaybeMessage< ::erogen::CountryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::erogen::CountryInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
