#!/bin/bash
#

set -e

# ******************************************************************************
#    CONSTANTS

# script name
readonly SCRIPT_NAME="$(basename "$0")"
# root dir
readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
# scripts dir
readonly SCRIPT_DIR="$(cd "${ROOT_DIR}/.scripts" && pwd)"
# formatters
readonly FMT_VARS="$SCRIPT_DIR/_colors_"

# ******************************************************************************
#    MAIN FUNCTIONS

# load formatters for logging
. "$FMT_VARS"

# script entrypoint.
main() {
  log_info "..."
}

run_prettier() {
  local readonly target_dir="$1"
  local readonly target_dir_abs="$ROOT_DIR/$target_dir"
  local readonly changed_files=$(
    git diff \
      --cached \
      --name-only \
      --diff-filter=ACM \
      "$target_dir_abs/**/*.ts" "$target_dir_abs/**/*.css" "$target_dir_abs/**/*.scss" "$target_dir_abs/**/*.html" | tr '\n' ' ')

  if [ -z "$changed_files" ]; then
    log_info "[prettier] No changes detected for '**/*.(ts|css|scss|html)'. Skipping.."
  else
    log_info "[prettier] Running prettier on affected '**/*.(ts|css|scss|html)' files"
    echo "$changed_files" | xargs web/node_modules/.bin/prettier --write
    
    log_info "[prettier] Adding prettified files back to staged"
    echo "$changed_files" | xargs git add
  fi
}

run_tslint() {
  # only apply to ADDED, COPIED, and MODIFIED ts files that have been staged.
  local readonly target_dir="$1"
  local readonly target_dir_abs="$ROOT_DIR/$target_dir"
  local readonly changed_files=$(git diff --cached --name-only --diff-filter=ACM "$target_dir_abs/**/*.ts" | tr '\n' ' ')

  if [ -z "$changed_files" ]; then
    log_info "[tslint] No changes detected for '$target_dir/**/*.ts'. Skipping.."
  else
    log_info "[tslint] Running tslint on $target_dir"
    (cd $target_dir && npm run lint)
  fi
}

# ******************************************************************************
#    HELPER FUNCS



# check for required binaries
check_required_binaries() {
  local readonly bin_name="$1"
  local readonly safe_exit="$2"

  if [[ ! $(command -v ${bin_name}) ]]; then
    if [ "$safe_exit" == "yes" ]; then
      log_warn "'$bin_name' cannot be found. Skipping task..."
      exit 0
    else
      log_error "Missing binary: '$bin_name' is required to run this script but is not in the system's PATH"
      exit 1
    fi
  fi
}

# ******************************************************************************
#    LOGGERS


# base logger
log() {
  local readonly lvl="$1"
  local readonly msg="$2"
  local readonly tst=$(date +"%H:%M:%S")
  printf "$FMT_CLR_PURPLE$tst $FMT_RESET$FMT_BOLD$lvl$FMT_RESET $msg\n"
}

# logger - LVL INFO
log_info() {
  log "\e[38;2;0;255;255m INFO [$SCRIPT_NAME]$FMT_RESET" "$1"
}

# logger - LVL WARN
log_warn() {
  log "\e[38;2;255;165;0m WARN [$SCRIPT_NAME]$FMT_RESET" "$1"
}

# logger - LVL ERROR
log_error() {
  log "\e[38;2;255;0;0mERROR [$SCRIPT_NAME]$FMT_RESET" "$1"
}

# ******************************************************************************
#    Execute
main "$@"
exit 0
